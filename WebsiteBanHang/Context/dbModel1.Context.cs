//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebsiteBanHang.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WebsiteBanHangEntities2 : DbContext
    {
        public WebsiteBanHangEntities2()
            : base("name=WebsiteBanHangEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C2119110263_Brand> C2119110263_Brand { get; set; }
        public virtual DbSet<C2119110263_Category> C2119110263_Category { get; set; }
        public virtual DbSet<C2119110263_Order> C2119110263_Order { get; set; }
        public virtual DbSet<C2119110263_Product> C2119110263_Product { get; set; }
        public virtual DbSet<C2119110263_Users> C2119110263_Users { get; set; }
        public virtual DbSet<C2119110263_OrderDetail> C2119110263_OrderDetail { get; set; }
        public virtual DbSet<C2119110263_Page> C2119110263_Page { get; set; }
        public virtual DbSet<C2119110263_Contact> C2119110263_Contact { get; set; }
        public virtual DbSet<C2119110263_Locations> C2119110263_Locations { get; set; }
        public virtual DbSet<C2119110263_CountryMaster> C2119110263_CountryMaster { get; set; }
        public virtual DbSet<C2119110263_Employees> C2119110263_Employees { get; set; }
        public virtual DbSet<C2119110263_Country> C2119110263_Country { get; set; }
    
        public virtual ObjectResult<GetDirection_Result> GetDirection(Nullable<int> locFrom, Nullable<int> locTo)
        {
            var locFromParameter = locFrom.HasValue ?
                new ObjectParameter("LocFrom", locFrom) :
                new ObjectParameter("LocFrom", typeof(int));
    
            var locToParameter = locTo.HasValue ?
                new ObjectParameter("LocTo", locTo) :
                new ObjectParameter("LocTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDirection_Result>("GetDirection", locFromParameter, locToParameter);
        }
    }
}
